{"version":3,"file":"BIhS8yJu.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"],"sourcesContent":["<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent, useRuntimeConfig } from \"#imports\";\nconst ContentQuery = defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    const legacy = !useRuntimeConfig().public.content.experimental.advanceQuery;\n    watch(() => props, () => refresh(), { deep: true });\n    const resolveResult = (result) => {\n      if (legacy) {\n        if (result?.surround) {\n          return result.surround;\n        }\n        return result?._id || Array.isArray(result) ? result : result?.result;\n      }\n      return result.result;\n    };\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne().then(resolveResult);\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find().then(resolveResult);\n          }\n          if (legacy) {\n            return queryBuilder.findSurround(path.value);\n          } else {\n            return queryBuilder.withSurround(path.value).findOne().then(resolveResult);\n          }\n        }\n        return queryBuilder.find().then(resolveResult);\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\nexport default ContentQuery;\n</script>\n"],"names":["ContentQuery","defineComponent","props","path","only","without","where","sort","limit","skip","locale","find","toRefs","isPartial","computed","_a","legacy","useRuntimeConfig","watch","refresh","resolveResult","result","data","useAsyncData","hash","queryBuilder","queryContent","ctx","slots","useSlots","slot","data2","h"],"mappings":"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","x_google_ignoreList":[0]}