{"version":3,"file":"Byl-xSB1.js","sources":["../../../../node_modules/@nuxtjs/mdc/dist/runtime/components/MDCRenderer.vue"],"sourcesContent":["<script>\nimport { h, resolveComponent, Text, Comment, defineComponent, toRaw, computed, getCurrentInstance } from \"vue\";\nimport destr from \"destr\";\nimport { kebabCase, pascalCase } from \"scule\";\nimport { find, html } from \"property-information\";\nimport htmlTags from \"../parser/utils/html-tags-list\";\nimport { flatUnwrap } from \"../utils/node\";\nconst DEFAULT_SLOT = \"default\";\nconst rxOn = /^@|^v-on:/;\nconst rxBind = /^:|^v-bind:/;\nconst rxModel = /^v-model/;\nconst nativeInputs = [\"select\", \"textarea\", \"input\"];\nconst proseComponentMap = Object.fromEntries([\"p\", \"a\", \"blockquote\", \"code\", \"pre\", \"code\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"img\", \"ul\", \"ol\", \"li\", \"strong\", \"table\", \"thead\", \"tbody\", \"td\", \"th\", \"tr\", \"script\"].map((t) => [t, `prose-${t}`]));\nexport default defineComponent({\n  name: \"MDCRenderer\",\n  props: {\n    /**\n     * Content to render\n     */\n    body: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Document meta data\n     */\n    data: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Root tag to use for rendering\n     */\n    class: {\n      type: [String, Object],\n      default: void 0\n    },\n    /**\n     * Root tag to use for rendering\n     */\n    tag: {\n      type: [String, Boolean],\n      default: void 0\n    },\n    /**\n     * Whether or not to render Prose components instead of HTML tags\n     */\n    prose: {\n      type: Boolean,\n      default: void 0\n    },\n    /**\n     * The map of custom components to use for rendering.\n     */\n    components: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    }\n  },\n  async setup(props) {\n    const $nuxt = getCurrentInstance()?.appContext?.app?.$nuxt;\n    const route = $nuxt?.$route || $nuxt?._route;\n    const { mdc } = $nuxt?.$config?.public || {};\n    const tags = {\n      ...mdc?.components?.prose && props.prose !== false ? proseComponentMap : {},\n      ...mdc?.components?.map || {},\n      ...toRaw(props.data?.mdc?.components || {}),\n      ...props.components\n    };\n    const contentKey = computed(() => {\n      const components = (props.body?.children || []).map((n) => n.tag || n.type).filter((t) => !htmlTags.includes(t));\n      return Array.from(new Set(components)).sort().join(\".\");\n    });\n    await resolveContentComponents(props.body, { tags });\n    return { tags, contentKey, route };\n  },\n  render(ctx) {\n    const { tags, tag, body, data, contentKey, route, unwrap } = ctx;\n    if (!body) {\n      return null;\n    }\n    const meta = { ...data, tags, $route: route };\n    const component = tag !== false ? resolveVueComponent(tag || meta.component?.name || meta.component || \"div\") : void 0;\n    return component ? h(component, { ...meta.component?.props, class: ctx.class, ...this.$attrs, key: contentKey }, { default: defaultSlotRenderer }) : defaultSlotRenderer?.();\n    function defaultSlotRenderer() {\n      if (unwrap) {\n        return flatUnwrap(\n          renderSlots(body, h, meta, meta).default(),\n          typeof unwrap === \"string\" ? unwrap.split(\" \") : [\"*\"]\n        );\n      }\n      return renderSlots(body, h, meta, meta).default();\n    }\n  }\n});\nfunction renderNode(node, h2, documentMeta, parentScope = {}) {\n  if (node.type === \"text\") {\n    return h2(Text, node.value);\n  }\n  if (node.type === \"comment\") {\n    return h2(Comment, null, node.value);\n  }\n  const originalTag = node.tag;\n  const renderTag = findMappedTag(node, documentMeta.tags);\n  if (node.tag === \"binding\") {\n    return renderBinding(node, h2, documentMeta, parentScope);\n  }\n  const component = resolveVueComponent(renderTag);\n  if (typeof component === \"object\") {\n    component.tag = originalTag;\n  }\n  const props = propsToData(node, documentMeta);\n  return h2(\n    component,\n    props,\n    renderSlots(node, h2, documentMeta, { ...parentScope, ...props })\n  );\n}\nfunction renderBinding(node, h2, documentMeta, parentScope = {}) {\n  const data = {\n    ...parentScope,\n    $document: documentMeta,\n    $doc: documentMeta\n  };\n  const splitter = /\\.|\\[(\\d+)\\]/;\n  const keys = node.props?.value.trim().split(splitter).filter(Boolean);\n  const value = keys.reduce((data2, key) => {\n    if (data2 && key in data2) {\n      if (typeof data2[key] === \"function\") {\n        return data2[key]();\n      } else {\n        return data2[key];\n      }\n    }\n    return void 0;\n  }, data);\n  const defaultValue = node.props?.defaultValue;\n  return h2(Text, value ?? defaultValue ?? \"\");\n}\nfunction renderSlots(node, h2, documentMeta, parentProps) {\n  const children = node.children || [];\n  const slotNodes = children.reduce((data, node2) => {\n    if (!isTemplate(node2)) {\n      data[DEFAULT_SLOT].push(node2);\n      return data;\n    }\n    const slotName = getSlotName(node2);\n    data[slotName] = data[slotName] || [];\n    if (node2.type === \"element\") {\n      data[slotName].push(...node2.children || []);\n    }\n    return data;\n  }, {\n    [DEFAULT_SLOT]: []\n  });\n  const slots = Object.entries(slotNodes).reduce((slots2, [name, children2]) => {\n    if (!children2.length) {\n      return slots2;\n    }\n    slots2[name] = () => {\n      const vNodes = children2.map((child) => renderNode(child, h2, documentMeta, parentProps));\n      return mergeTextNodes(vNodes);\n    };\n    return slots2;\n  }, {});\n  return slots;\n}\nfunction propsToData(node, documentMeta) {\n  const { tag = \"\", props = {} } = node;\n  return Object.keys(props).reduce(function(data, key) {\n    if (key === \"__ignoreMap\") {\n      return data;\n    }\n    const value = props[key];\n    if (rxModel.test(key) && !nativeInputs.includes(tag)) {\n      return propsToDataRxModel(key, value, data, documentMeta);\n    }\n    if (key === \"v-bind\") {\n      return propsToDataVBind(key, value, data, documentMeta);\n    }\n    if (rxOn.test(key)) {\n      return propsToDataRxOn(key, value, data, documentMeta);\n    }\n    if (rxBind.test(key)) {\n      return propsToDataRxBind(key, value, data, documentMeta);\n    }\n    const { attribute } = find(html, key);\n    if (Array.isArray(value) && value.every((v) => typeof v === \"string\")) {\n      data[attribute] = value.join(\" \");\n      return data;\n    }\n    data[attribute] = value;\n    return data;\n  }, {});\n}\nfunction propsToDataRxModel(key, value, data, documentMeta) {\n  const number = (d) => +d;\n  const trim = (d) => d.trim();\n  const noop = (d) => d;\n  const mods = key.replace(rxModel, \"\").split(\".\").filter((d) => d).reduce((d, k) => {\n    d[k] = true;\n    return d;\n  }, {});\n  const field = \"value\";\n  const event = mods.lazy ? \"change\" : \"input\";\n  const processor = mods.number ? number : mods.trim ? trim : noop;\n  data[field] = evalInContext(value, documentMeta);\n  data.on = data.on || {};\n  data.on[event] = (e) => documentMeta[value] = processor(e);\n  return data;\n}\nfunction propsToDataVBind(_key, value, data, documentMeta) {\n  const val = evalInContext(value, documentMeta);\n  data = Object.assign(data, val);\n  return data;\n}\nfunction propsToDataRxOn(key, value, data, documentMeta) {\n  key = key.replace(rxOn, \"\");\n  data.on = data.on || {};\n  data.on[key] = () => evalInContext(value, documentMeta);\n  return data;\n}\nfunction propsToDataRxBind(key, value, data, documentMeta) {\n  key = key.replace(rxBind, \"\");\n  data[key] = evalInContext(value, documentMeta);\n  return data;\n}\nconst resolveVueComponent = (component) => {\n  if (!htmlTags.includes(component) && !component?.render && !component?.ssrRender) {\n    const componentFn = resolveComponent(pascalCase(component), false);\n    if (typeof componentFn === \"object\") {\n      return componentFn;\n    }\n  }\n  return component;\n};\nfunction evalInContext(code, context) {\n  const result = code.split(\".\").reduce((o, k) => typeof o === \"object\" ? o[k] : void 0, context);\n  return typeof result === \"undefined\" ? destr(code) : result;\n}\nfunction getSlotName(node) {\n  let name = \"\";\n  for (const propName of Object.keys(node.props || {})) {\n    if (!propName.startsWith(\"#\") && !propName.startsWith(\"v-slot:\")) {\n      continue;\n    }\n    name = propName.split(/[:#]/, 2)[1];\n    break;\n  }\n  return name || DEFAULT_SLOT;\n}\nfunction isTemplate(node) {\n  return node.tag === \"template\";\n}\nfunction mergeTextNodes(nodes) {\n  const mergedNodes = [];\n  for (const node of nodes) {\n    const previousNode = mergedNodes[mergedNodes.length - 1];\n    if (node.type === Text && previousNode?.type === Text) {\n      previousNode.children = previousNode.children + node.children;\n    } else {\n      mergedNodes.push(node);\n    }\n  }\n  return mergedNodes;\n}\nasync function resolveContentComponents(body, meta) {\n  if (!body) {\n    return;\n  }\n  const components = Array.from(new Set(loadComponents(body, meta)));\n  await Promise.all(components.map(async (c) => {\n    if (c?.render || c?.ssrRender || c?.__ssrInlineRender) {\n      return;\n    }\n    const resolvedComponent = resolveVueComponent(c);\n    if (resolvedComponent?.__asyncLoader && !resolvedComponent.__asyncResolved) {\n      await resolvedComponent.__asyncLoader();\n    }\n  }));\n  function loadComponents(node, documentMeta) {\n    const tag = node.tag;\n    if (node.type === \"text\" || tag === \"binding\" || node.type === \"comment\") {\n      return [];\n    }\n    const renderTag = findMappedTag(node, documentMeta.tags);\n    const components2 = [];\n    if (node.type !== \"root\" && !htmlTags.includes(renderTag)) {\n      components2.push(renderTag);\n    }\n    for (const child of node.children || []) {\n      components2.push(...loadComponents(child, documentMeta));\n    }\n    return components2;\n  }\n}\nfunction findMappedTag(node, tags) {\n  const tag = node.tag;\n  if (!tag || typeof node.props?.__ignoreMap !== \"undefined\") {\n    return tag;\n  }\n  return tags[tag] || tags[pascalCase(tag)] || tags[kebabCase(node.tag)] || tag;\n}\n</script>\n"],"names":["DEFAULT_SLOT","rxOn","rxBind","rxModel","nativeInputs","proseComponentMap","t","_sfc_main","defineComponent","props","$nuxt","_c","_b","_a","getCurrentInstance","route","mdc","_d","tags","_e","_f","toRaw","_h","_g","contentKey","computed","components","n","htmlTags","resolveContentComponents","ctx","tag","body","data","unwrap","meta","component","resolveVueComponent","h","defaultSlotRenderer","flatUnwrap","renderSlots","renderNode","node","h2","documentMeta","parentScope","Text","Comment","originalTag","renderTag","findMappedTag","renderBinding","propsToData","splitter","value","data2","key","defaultValue","parentProps","slotNodes","node2","isTemplate","slotName","getSlotName","slots2","name","children2","vNodes","child","mergeTextNodes","propsToDataRxModel","propsToDataVBind","propsToDataRxOn","propsToDataRxBind","attribute","find","html","v","number","d","trim","noop","mods","k","field","event","processor","evalInContext","e","_key","val","componentFn","resolveComponent","pascalCase","code","context","result","o","destr","propName","nodes","mergedNodes","previousNode","loadComponents","c","resolvedComponent","components2","kebabCase"],"mappings":"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","x_google_ignoreList":[0]}