{"version":3,"file":"CFditXmz.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentList.vue"],"sourcesContent":["<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nconst emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentList>\", slot, data }, null, 2));\nconst ContentList = defineComponent({\n  name: \"ContentList\",\n  props: {\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default '/'\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { path, query } = ctx;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || \"/\"\n    };\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => slots.default({ list: data, refresh, isPartial, ...this.$attrs }) : (bindings) => emptyNode(\"default\", bindings.data),\n        // Empty slot\n        empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", bindings?.data),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"] ? slots?.[\"not-found\"]?.(bindings) : emptyNode(\"not-found\", bindings?.data)\n      }\n    );\n  }\n});\nexport default ContentList;\n</script>\n"],"names":["emptyNode","slot","data","h","ContentList","defineComponent","ctx","slots","useSlots","path","query","contentQueryProps","ContentQuery","refresh","isPartial","bindings","_a"],"mappings":"6EAGA,MAAAA,EAAA,CAAAC,EAAAC,IAAAC,EAAA,MAAA,KAAA,KAAA,UAAA,CAAA,QAAA,0CAAA,KAAAF,EAAA,KAAAC,CAAA,EAAA,KAAA,CAAA,CAAA,EACAE,EAAAC,EAAA,CACA,KAAA,cACA,MAAA,CAQA,KAAA,CACA,KAAA,OACA,SAAA,GACA,QAAA,MACA,EAIA,MAAA,CACA,KAAA,OACA,SAAA,GACA,QAAA,MACA,CACA,EASA,OAAAC,EAAA,CACA,MAAAC,EAAAC,EAAA,EACA,CAAA,KAAAC,EAAA,MAAAC,CAAA,EAAAJ,EACAK,EAAA,CACA,GAAAD,GAAA,CAAA,EACA,KAAAD,IAAAC,GAAA,YAAAA,EAAA,OAAA,GACA,EACA,OAAAP,EACAS,EACAD,EACA,CAEA,QAAAJ,GAAA,MAAAA,EAAA,QAAA,CAAA,CAAA,KAAAL,EAAA,QAAAW,EAAA,UAAAC,KAAAP,EAAA,QAAA,CAAA,KAAAL,EAAA,QAAAW,EAAA,UAAAC,EAAA,GAAA,KAAA,MAAA,CAAA,EAAAC,GAAAf,EAAA,UAAAe,EAAA,IAAA,EAEA,MAAAA,GAAAR,GAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAQ,CAAA,EAAAf,EAAA,UAAAe,GAAA,YAAAA,EAAA,IAAA,EAEA,YAAAA,GAAA,OAAA,OAAAR,GAAA,MAAAA,EAAA,cAAAS,EAAAT,GAAA,YAAAA,EAAA,eAAA,YAAAS,EAAA,KAAAT,EAAAQ,GAAAf,EAAA,YAAAe,GAAA,YAAAA,EAAA,IAAA,EACA,CACA,CACA,CACA,CAAA,IACAX","x_google_ignoreList":[0]}