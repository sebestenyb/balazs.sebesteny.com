{"version":3,"file":"CoaE-Qo1.js","sources":["../../../node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue"],"sourcesContent":["<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRuntimeConfig, useRoute, useContentHead } from \"#imports\";\nconst ContentDoc = defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const { contentHead } = useRuntimeConfig().public.content;\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const shouldInjectContentHead = head === void 0 ? contentHead : head;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\nexport default ContentDoc;\n</script>\n"],"names":["ContentDoc","defineComponent","ctx","contentHead","useRuntimeConfig","slots","useSlots","tag","excerpt","path","query","head","shouldInjectContentHead","contentQueryProps","withTrailingSlash","useRoute","emptyNode","slot","data","h","ContentQuery","refresh","isPartial","useContentHead","ContentRenderer","bindings"],"mappings":"4KAMA,MAAAA,EAAAC,EAAA,CACA,KAAA,aACA,MAAA,CAQA,IAAA,CACA,KAAA,OACA,SAAA,GACA,QAAA,OAMA,QAAA,CACA,KAAA,QACA,QAAA,IASA,KAAA,CACA,KAAA,OACA,SAAA,GACA,QAAA,QAKA,MAAA,CACA,KAAA,OACA,SAAA,GACA,QAAA,QAKA,KAAA,CACA,KAAA,QACA,SAAA,GACA,QAAA,MACA,GAUA,OAAAC,EAAA,CACA,KAAA,CAAA,YAAAC,CAAA,EAAAC,EAAA,EAAA,OAAA,QACAC,EAAAC,EAAA,EACA,CAAA,IAAAC,EAAA,QAAAC,EAAA,KAAAC,EAAA,MAAAC,EAAA,KAAAC,CAAA,EAAAT,EACAU,EAAAD,IAAA,OAAAR,EAAAQ,EACAE,EAAA,CACA,GAAAH,GAAA,CAAA,EACA,KAAAD,GAAAC,GAAA,MAAAI,EAAAC,EAAA,EAAA,IAAA,EACA,KAAA,OAEAC,EAAA,CAAAC,EAAAC,IAAAC,EAAA,MAAA,KAAA,KAAA,UAAA,CAAA,QAAA,yCAAA,KAAAF,EAAA,KAAAC,CAAA,EAAA,KAAA,CAAA,CAAA,EACA,OAAAC,EACAC,EACAP,EACA,CAEA,QAAAR,GAAA,QAAA,CAAA,CAAA,KAAAa,EAAA,QAAAG,EAAA,UAAAC,MACAV,GACAW,EAAAL,CAAA,EAEAb,EAAA,UAAA,CAAA,IAAAa,EAAA,QAAAG,EAAA,UAAAC,EAAA,QAAAd,EAAA,GAAA,KAAA,MAAA,CAAA,GACA,CAAA,CAAA,KAAAU,MACAN,GACAW,EAAAL,CAAA,EAEAC,EACAK,EACA,CAAA,MAAAN,EAAA,QAAAV,EAAA,IAAAD,EAAA,GAAA,KAAA,QAEA,CAAA,MAAAkB,GAAApB,GAAA,MAAAA,EAAA,MAAAoB,CAAA,EAAAT,EAAA,UAAAE,CAAA,CAAA,IAIA,MAAAO,GAAApB,GAAA,QAAAoB,CAAA,GAAAN,EAAA,IAAA,KAAA,6EAAA,EAEA,YAAAM,GAAApB,IAAA,WAAA,IAAAoB,CAAA,GAAAN,EAAA,IAAA,KAAA,kFAAA,CACA,EAEA,CACA,CAAA,IACAnB","x_google_ignoreList":[0]}