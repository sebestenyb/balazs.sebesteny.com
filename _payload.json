[{"data":1,"prerenderedAt":33},["ShallowReactive",2],{"search-api":3},[4,11,17,25],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Senior Software Engineer    Results-oriented  Software Developer with 20 years of experience across the full software development lifecycle. Proven leadership in both agency and SaaS startup environments. Foster a collaborative and growth-oriented work ethic, with a passion for mentoring and knowledge sharing. Highly organised and analytical, with a demonstrated ability to quickly learn and adapt to new technologies.     Software and product development:   20 years  MySQL:   15 years  Object-Oriented languages:   15 years  Laravel/VueJS:   10 years    (experience with Symfony and Zend, React, TypeScript)  NoSQL:   5 years    (ElasticSearch, MongoDB, Redis)  DevOps:   10 years    (AWS, DigitalOcean and Google Cloud, Docker and Terraform)      My experiences      API design   Experience in API design, microservices and SPAs.    High Scalability   Development and integration for high-load scalable systems.    Database performance tuning   Proven expertise with database performance tuning.    AWS products   AWS products (S3, EC2, EBS, Lambda, RDS and Aurora, SQS, SES),    Continuous integration   Continuous integration approaches, such as automated testing and deployment, code style checking, automated load testing    Error/performance monitoring   Error/performance monitoring",{"id":12,"path":13,"dir":7,"title":14,"description":7,"keywords":15,"body":16},"content:1.getting-started.md","/getting-started","Getting started",[],"  Getting started    Articles      Laravel   Laravel related articles.   Read more    Vue   Posts about VueJS.   Read more .",{"id":18,"path":19,"dir":20,"title":21,"description":22,"keywords":23,"body":24},"content:1.laravel:1.laravel-pipelines.md","/laravel/laravel-pipelines","laravel","Laravel Pipelines","A tale of Laravel Pipelines, form requests and the service container",[],"  Laravel Pipelines  In one of my regular code cleaning sessions I found a piece of code in our controller very similar to this picture:    It looks clean and readable, but the code just went on and on, and made the understanding of the   controller  code much harder than it needs to be.  In this case all I needed to know was that we have an incomin request with parameters, and we have to filter our query based on the different parameters.\nThere is absolutely no need to keep all the implementation details in the controller.   So how to tackle this?  We can extract our various filters to pipes, and send our base query through them:     class   BookingController   extends   Controller\n   {\n       public   function   index  (  ListBookingsRequest   $request)  :   AnonymousResourceCollection\n       {\n           $bookings   =   app  (  Pipeline  ::class  )\n               ->  send  (  Booking  ::  query  ())\n               ->  through  (  pipes  : [\n                   FilterByDateRange  ::class  ,\n                   FilterByRescheduleIdentifier  ::class  ,\n                   FilterByGroupIdentifier  ::class  ,\n                   FilterBySequenceIdentifier  ::class  ,\n                   FilterByBookingFormIdentifier  ::class  ,\n                   FilterByClients  ::class  ,\n                   FilterByStatus  ::class  ,\n                   FilterByTransportRequirement  ::class  ,\n                   FilterByRegion  ::class  ,\n                   FilterByAllocation  ::class  ,\n                   FilterByUuid  ::class  ,\n                   FilterOnlyTrashed  ::class  ,\n                   OrderBookings  ::class  ,\n                   SearchBookings  ::class  ,\n               ])\n               ->  thenReturn  ()\n               ->  paginate  ();\n   \n           return   BookingResource  ::  collection  ($bookings);\n       }\n   }\n  The problem arises when we need to pass multiple arguments to our filter classes, in our cases we need to pass the   request  in order to extract the filter parameters:     class   FilterByDateRange\n   {\n       public   function   __invoke  (  Builder   $query,   Closure   $next)  :   Builder\n       {\n           return   $next($query)\n               ->  when  (\n                   value  :   $this  ->  request  ->  filled  (  'date'  ),\n                   callback  :   function   (  Builder   $q) {\n                       $date   =   Carbon  ::  parse  (  $this  ->  request  ->  validated  (  'date'  ),   organisation_timezone  ());\n                       return   $q  ->  whereBetween  (\n                           column  :   'date'  ,\n                           values  : [\n                               $date  ->  clone  ()  ->  startOfDay  ()  ->  utc  ()  ->  toDateTimeString  (),\n                               $date  ->  clone  ()  ->  endOfDay  ()  ->  utc  ()  ->  toDateTimeString  (),\n                           ]\n                       );\n                   }\n               );\n       }\n   }\n  One option is to use DTOs, constructed from the base query, and the various request fields we need.  The other option is to rely on Laravel's service container to inject the request instance to our filters.\nBy simply typing a   FormRequest $request  in our consturctor, we instruct Laravel to inject the current form request:     class   FilterByDateRange\n   {\n       public   function   __construct  (  protected   FormRequest   $request)\n       {\n       }\n   \n       //...\n   }\n  We need to use   FormRequest  as a type, so we have access to the   validated  method.\nHere's our redacted form request class:     class   ListBookingsRequest   extends   FormRequest\n   {\n       public   function   authorize  ()  :   bool\n       {\n           return   $this  ->  user  ()  ->  can  (  'viewAny'  ,   Booking  ::class  );\n       }\n   \n       public   function   rules  ()  :   array\n       {\n           return   [\n               // ...\n               'clients'   =>   [  'sometimes'  ,   'array'  ],\n               'clients.*'   =>   [  'sometimes'  ,   Rule  ::  exists  ((  new   Client  ())  ->  getTable  (),   'uuid'  )],\n               // ...\n               'uuids.*'   =>   [  'sometimes'  ,   Rule  ::  exists  ((  new   Booking  ())  ->  getTable  (),   'uuid'  )],\n               'date'   =>   [  'bail'  ,   'nullable'  ,   'string'  ,   'max:255'  ,   'date'  ],\n               // ...\n               'status_filter'   =>   [  'nullable'  ,   'array'  ],\n               'status_filter.*'   =>   [  'nullable'  ,   'string'  ,   'max:255'  ,   Rule  ::  in  (  BookingStatus  ::  values  ())],\n               // ...\n               'transport_requirements'   =>   [  'sometimes'  ,   'array'  ],\n               'transport_requirements.*.code'   =>   [  'required'  ,   Rule  ::  exists  ((  new   TransportRequirement  ())  ->  getTable  (),   'code'  )],\n           ];\n       }\n   }\n  There is only one problem with this approach,which we learnt the hard way.\nLaravel will inject a   new  instance of the request for every filter class instance.   Why it is a problem?  For two reasons in our form request: our   authorize  method, and our   exists  and   in  rules.\nBoth the   authorize  method and the various rules will execute database queries for each instance of the request.   In our case 5 queries per request instance used in 14 different filters:   70 queries .  While this was a fairly obscure bug to track down, the fix is relatively easy:   Do not relay on the service container, but   pass the request manually  to the filters:     class   BookingController   extends   Controller\n   {\n       public   function   index  (  ListBookingsRequest   $request)  :   AnonymousResourceCollection\n       {\n           $bookings   =   app  (  Pipeline  ::class  )\n               ->  send  (  Booking  ::  query  ())\n               ->  through  (  pipes  : [\n                   new   FilterByRescheduleIdentifier  ($request),\n                   new   FilterByGroupIdentifier  ($request),\n                   new   FilterBySequenceIdentifier  ($request),\n                   new   FilterByBookingFormIdentifier  ($request),\n                   new   FilterByClients  ($request),\n                   new   FilterByDate  ($request),\n                   new   FilterByDateRange  ($request),\n                   new   FilterByStatus  ($request),\n                   new   FilterByTransportRequirement  ($request),\n                   new   FilterByRegion  ($request),\n                   new   OrderBookings  ($request),\n                   new   SearchBookings  ($request),\n                   new   FilterByAllocation  ($request),\n                   new   FilterByUuid  ($request),\n                   new   FilterOnlyTrashed  ($request),\n               ])\n               ->  thenReturn  ()\n               ->  paginate  ();\n   \n           return   BookingResource  ::  collection  ($Booking);\n       }\n   }\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":26,"path":27,"dir":28,"title":29,"description":30,"keywords":31,"body":32},"content:2.vue:1.vue-props.md","/vue/vue-props","vue","Vue Props","How to pass writeable properties to child components",[],"  Vue Props",1721452435170]